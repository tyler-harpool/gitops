apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "1"
  name: local-ai
  # You'll usually want to add your resources to the argocd namespace.
  namespace: argocd
  # Add this finalizer ONLY if you want these to cascade delete.
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  # The project the application belongs to.
  project: default
  # Source of the application manifests
  source:
    repoURL: https://go-skynet.github.io/helm-charts/  # Can point to either a Helm chart repo or a git repo.
    targetRevision: 2.1.0  # For Helm, this refers to the chart version.

    # helm specific config1
    chart: local-ai   # Set this when pulling directly from a Helm repo. DO NOT set for git-hosted Helm charts.
    helm:
      # Extra parameters to set (same as setting through values.yaml, but these take precedence)
      # Release name override (defaults to application name)
      releaseName: local-ai
      # Optional Helm version to template with. If omitted it will fall back to look at the 'apiVersion' in Chart.yaml
      # and decide which Helm binary to use automatically. This field can be either 'v2' or 'v3'.
      version: v3
      values: |
        deployment:
          image: quay.io/go-skynet/local-ai:latest
          env:
            threads: 14
            contextSize: 512
            modelsPath: "/models"
        # Optionally create a PVC, mount the PV to the LocalAI Deployment,
        # and download a model to prepopulate the models directory
        modelsVolume:
          enabled: true
          url: "https://gpt4all.io/models/ggml-gpt4all-j.bin"
          pvc:
            size: 6Gi
            accessModes:
            - ReadWriteOnce
          auth:
            # Optional value for HTTP basic access authentication header
            basic: "" # 'username:password' base64 encoded
        service:
          type: ClusterIP
          port: 8080
          annotations: {}
          # If using an AWS load balancer, you'll need to override the default 60s load balancer idle timeout
          # service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "1200"

  # Destination cluster and namespace to deploy the application
  destination:
    server: https://kubernetes.default.svc
    namespace: local-ai

  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - Replace=true
    - CreateNamespace=true